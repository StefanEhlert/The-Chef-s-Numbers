import React, { useState, useEffect } from 'react';
import { FaDatabase, FaTable, FaKey, FaLink, FaCode, FaInfoCircle, FaEye, FaEyeSlash, FaPlay, FaSync, FaCheckCircle, FaExclamationTriangle, FaCog, FaRobot, FaMagic } from 'react-icons/fa';
import { DEFAULT_STORAGE_CONFIGS } from '../types/storage';
import { StorageLayer } from '../services/storageLayer';
import { schemaMigrationService } from '../services/SchemaMigrationService';

const DevelopmentPage: React.FC = () => {
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    overview: true,
    autoSchemaGenerator: true,
    schemaMigration: true,
    debugAppStart: true,
    localStorageInspector: true
  });
  const [expandedTables, setExpandedTables] = useState<{ [key: string]: boolean }>({});
  const [isLoading, setIsLoading] = useState(false);
  const [debugLogs, setDebugLogs] = useState<string[]>([]);
  const [isDebugRunning, setIsDebugRunning] = useState(false);
  const [localStorageData, setLocalStorageData] = useState<{ [key: string]: any }>({});
  const [generatedSQL, setGeneratedSQL] = useState<string>('');
  const [isGeneratingSQL, setIsGeneratingSQL] = useState(false);
  
  // Automatische Schema-Generierung States
  const [autoGeneratedSchema, setAutoGeneratedSchema] = useState<any>(null);
  const [isGeneratingAutoSchema, setIsGeneratingAutoSchema] = useState(false);
  
  // Schema-Migration States
  const [migrationResult, setMigrationResult] = useState<any>(null);
  const [isMigrating, setIsMigrating] = useState(false);
  const [schemaValidation, setSchemaValidation] = useState<any>(null);

  // LocalStorage-Daten laden
  const loadLocalStorageData = () => {
    const data: { [key: string]: any } = {};
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith('chef_')) {
        try {
          data[key] = JSON.parse(localStorage.getItem(key) || '{}');
        } catch {
          data[key] = localStorage.getItem(key);
        }
      }
    }
    setLocalStorageData(data);
  };

  const colors = {
    primary: '#007bff',
    secondary: '#6c757d',
    success: '#28a745',
    danger: '#dc3545',
    warning: '#ffc107',
    info: '#17a2b8',
    light: '#f8f9fa',
    dark: '#343a40',
    background: '#ffffff',
    card: '#ffffff',
    cardBorder: '#dee2e6',
    text: '#212529',
    textSecondary: '#6c757d'
  };

  useEffect(() => {
    // Initialisierung
    const initializeDevelopmentPage = async () => {
      setIsLoading(true);
      try {
        // Lade automatisch generiertes Schema
        await loadAutoGeneratedSchema();
        
        // Lade LocalStorage-Daten
        loadLocalStorageData();
        
        // Validiere Schema
        await validateSchema();
        
      } catch (error) {
        console.error('Fehler bei Initialisierung:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    initializeDevelopmentPage();
  }, []);

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const toggleTable = (tableName: string) => {
    setExpandedTables(prev => ({
      ...prev,
      [tableName]: !prev[tableName]
    }));
  };

  // Debug-Funktion f√ºr Storage-Schema (erweitert um StorageLayer-Update)
  const debugStorageSchema = async () => {
    setIsDebugRunning(true);
    setDebugLogs([]);
    
    const addLog = (message: string) => {
      const timestamp = new Date().toLocaleTimeString();
      setDebugLogs(prev => [...prev, `[${timestamp}] ${message}`]);
      console.log(`üîç DEBUG: ${message}`);
    };

    try {
      addLog('üöÄ Debug Storage-Schema gestartet...');
      
      // SCHRITT 1: Aktuelle Storage-Konfiguration auslesen
      addLog('üì± SCHRITT 1: Aktuelle Storage-Konfiguration auslesen');
      
      const storageSchema = localStorage.getItem('storageSchema');
      let config;
      
      if (storageSchema) {
        try {
          const schema = JSON.parse(storageSchema);
          config = {
            mode: schema.selectedStorageMode,
            data: schema.selectedDataStorage,
            picture: schema.selectedPictureStorage
          };
          addLog(`   ‚Üí StorageSchema gefunden:`);
          addLog(`     ‚Ä¢ Modus: ${config.mode}`);
          addLog(`     ‚Ä¢ Cloud-Typ: ${schema.selectedCloudType}`);
          addLog(`     ‚Ä¢ Daten: ${config.data}`);
          addLog(`     ‚Ä¢ Bilder: ${config.picture}`);
          addLog(`     ‚Ä¢ Vollst√§ndige Konfiguration:`);
          addLog(`       ${JSON.stringify(schema, null, 2)}`);
        } catch (error) {
          addLog(`   ‚Üí Fehler beim Parsen des StorageSchemas: ${error}`);
          config = DEFAULT_STORAGE_CONFIGS.local;
        }
      } else {
        addLog(`   ‚Üí Kein StorageSchema gefunden`);
        config = DEFAULT_STORAGE_CONFIGS.local;
        addLog(`   ‚Üí Verwende Standard-Konfiguration: ${JSON.stringify(config, null, 2)}`);
      }
      
      // SCHRITT 2: Verbindungsdaten aus StorageSchema laden
      addLog('üîó SCHRITT 2: Verbindungsdaten aus StorageSchema laden');
      
      const connectionData: any = {};
      
      // Lade StorageSchema (bereits in Schritt 1 geladen)
      if (storageSchema) {
        try {
          const schema = JSON.parse(storageSchema);
          addLog(`   ‚Üí StorageSchema gefunden:`);
          addLog(`     ‚Ä¢ Ausgew√§hlte Daten-Speicherung: ${schema.selectedDataStorage}`);
          addLog(`     ‚Ä¢ Ausgew√§hlte Bild-Speicherung: ${schema.selectedPictureStorage}`);
          
          // Extrahiere Verbindungsdaten basierend auf ausgew√§hlten Services
          if (schema.selectedDataStorage === 'PostgreSQL') {
            connectionData.postgres = schema.connections.postgres;
            addLog(`   ‚Üí PostgreSQL Konfiguration: ${connectionData.postgres.host}:${connectionData.postgres.port}`);
          }
          
          if (schema.selectedPictureStorage === 'MinIO') {
            connectionData.minio = schema.connections.minio;
            addLog(`   ‚Üí MinIO Konfiguration: ${connectionData.minio.host}:${connectionData.minio.port}`);
          }
          
          if (schema.selectedDataStorage === 'Supabase' || schema.selectedPictureStorage === 'Supabase') {
            connectionData.supabase = schema.connections.supabase;
            addLog(`   ‚Üí Supabase Konfiguration: ${connectionData.supabase.url}`);
          }
          
          if (schema.selectedDataStorage === 'Firebase' || schema.selectedPictureStorage === 'Firebase') {
            connectionData.firebase = schema.connections.firebase;
            addLog(`   ‚Üí Firebase Konfiguration: ${connectionData.firebase.projectId}`);
          }
          
        } catch (error) {
          addLog(`   ‚Üí Fehler beim Parsen des StorageSchemas: ${error}`);
        }
      } else {
        addLog(`   ‚Üí Kein StorageSchema gefunden - verwende Legacy-Konfigurationen`);
        
        // Fallback: Lade Legacy-Konfigurationen
        const postgresConfig = localStorage.getItem('postgresConfig');
        if (postgresConfig) {
          try {
            connectionData.postgres = JSON.parse(postgresConfig);
            addLog(`   ‚Üí Legacy PostgreSQL Konfiguration gefunden: ${connectionData.postgres.host}:${connectionData.postgres.port}`);
          } catch (error) {
            addLog(`   ‚Üí Fehler beim Parsen der Legacy PostgreSQL-Konfiguration: ${error}`);
          }
        }
        
        const minioConfig = localStorage.getItem('chef_minio_config');
        if (minioConfig) {
          try {
            connectionData.minio = JSON.parse(minioConfig);
            addLog(`   ‚Üí Legacy MinIO Konfiguration gefunden: ${connectionData.minio.host}:${connectionData.minio.port}`);
          } catch (error) {
            addLog(`   ‚Üí Fehler beim Parsen der Legacy MinIO-Konfiguration: ${error}`);
          }
        }
        
        const supabaseConfig = localStorage.getItem('supabaseConfig');
        if (supabaseConfig) {
          try {
            connectionData.supabase = JSON.parse(supabaseConfig);
            addLog(`   ‚Üí Legacy Supabase Konfiguration gefunden: ${connectionData.supabase.url}`);
          } catch (error) {
            addLog(`   ‚Üí Fehler beim Parsen der Legacy Supabase-Konfiguration: ${error}`);
          }
        }
      }
      
      // SCHRITT 3: StorageLayer mit Schema und Verbindungsdaten initialisieren
      addLog('üèóÔ∏è SCHRITT 3: StorageLayer mit Schema und Verbindungsdaten initialisieren');
      
      try {
        const storageLayer = StorageLayer.getInstance();
        const initResult = await storageLayer.initialize(config, connectionData);
        
        if (initResult) {
          addLog(`   ‚Üí StorageLayer erfolgreich initialisiert`);
          addLog(`   ‚Üí Aktueller Modus: ${config.mode}`);
          addLog(`   ‚Üí Daten-Service: ${config.data}`);
          addLog(`   ‚Üí Bild-Service: ${config.picture}`);
          
          // Test der StorageLayer-Funktionalit√§t
          addLog('üß™ SCHRITT 4: StorageLayer-Funktionalit√§t testen');
          
          const testData = [
            { id: 'test-1', name: 'Test Artikel', timestamp: Date.now() },
            { id: 'test-2', name: 'Test Artikel 2', timestamp: Date.now() }
          ];
          
          // Test Save
          const saveResult = await storageLayer.save('test_articles', testData);
          addLog(`   ‚Üí Test Save: ${saveResult ? '‚úÖ Erfolgreich' : '‚ùå Fehlgeschlagen'}`);
          
          // Test Load
          const loadResult = await storageLayer.load('test_articles');
          addLog(`   ‚Üí Test Load: ${loadResult ? `‚úÖ Erfolgreich (${loadResult.length} Eintr√§ge)` : '‚ùå Fehlgeschlagen'}`);
          
          // Test Delete
          const deleteResult = await storageLayer.delete('test_articles', 'test-1');
          addLog(`   ‚Üí Test Delete: ${deleteResult ? '‚úÖ Erfolgreich' : '‚ùå Fehlgeschlagen'}`);
          
          // Cleanup
          await storageLayer.delete('test_articles', 'test-2');
          addLog(`   ‚Üí Test-Daten bereinigt`);
          
        } else {
          addLog(`   ‚Üí StorageLayer Initialisierung fehlgeschlagen`);
        }
        
      } catch (error) {
        addLog(`   ‚Üí Fehler bei StorageLayer Initialisierung: ${error}`);
        addLog(`   ‚Üí Fehlerdetails: ${error instanceof Error ? error.message : String(error)}`);
        
        // Fehlerbehandlung mit Umleitung zur Speicherverwaltung
        addLog('‚ö†Ô∏è FEHLERBEHANDLUNG: Umleitung zur Speicherverwaltung');
        addLog('   ‚Üí Der Benutzer sollte die Cloud-Einstellungen in der Speicherverwaltung korrigieren');
        addLog('   ‚Üí Fehlerursache: Verbindungsdaten sind unvollst√§ndig oder fehlerhaft');
        
        // Hier k√∂nnte eine automatische Umleitung implementiert werden
        // window.location.href = '/storage-management';
      }
      
      addLog('‚úÖ Debug Storage-Schema abgeschlossen!');
      addLog('üí° StorageLayer ist jetzt mit dem aktuellen Schema konfiguriert');
      
    } catch (error) {
      addLog(`‚ùå Fehler beim Debug Storage-Schema: ${error}`);
    } finally {
      setIsDebugRunning(false);
    }
  };

  // Lade automatisch generiertes Schema
  const loadAutoGeneratedSchema = async () => {
    try {
      const { AUTO_GENERATED_SCHEMA_DEFINITIONS, AUTO_GENERATED_SQL } = await import('../schemas/generated/autoGeneratedSchema');
      setAutoGeneratedSchema(AUTO_GENERATED_SCHEMA_DEFINITIONS);
      setGeneratedSQL(AUTO_GENERATED_SQL);
    } catch (error) {
      console.error('Fehler beim Laden des automatisch generierten Schemas:', error);
    }
  };

  // Generiere automatisches Schema neu
  const generateAutoSchema = async () => {
    setIsGeneratingAutoSchema(true);
    try {
      // Hier w√ºrde normalerweise ein API-Call stattfinden
      // F√ºr jetzt simulieren wir die Generierung
      console.log('üîÑ Generiere automatisches Schema...');
      
      // Simuliere Generierung
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Lade Schema neu
      await loadAutoGeneratedSchema();
      
      console.log('‚úÖ Automatisches Schema erfolgreich generiert');
    } catch (error) {
      console.error('Fehler bei automatischer Schema-Generierung:', error);
    } finally {
      setIsGeneratingAutoSchema(false);
    }
  };

  // Validiere Schema
  const validateSchema = async () => {
    try {
      const validation = await schemaMigrationService.validateSchema();
      setSchemaValidation(validation);
    } catch (error) {
      console.error('Fehler bei Schema-Validierung:', error);
    }
  };

  // F√ºhre Schema-Migration durch
  const executeMigration = async () => {
    setIsMigrating(true);
    try {
      const result = await schemaMigrationService.checkAndMigrate();
      setMigrationResult(result);
      
      if (result.success) {
        console.log('‚úÖ Schema-Migration erfolgreich');
        // Validiere Schema nach Migration
        await validateSchema();
      } else {
        console.error('‚ùå Schema-Migration fehlgeschlagen');
      }
    } catch (error) {
      console.error('Fehler bei Schema-Migration:', error);
      setMigrationResult({
        success: false,
        migrationsExecuted: 0,
        migrationsFailed: 1,
        message: `Fehler: ${error}`
      });
    } finally {
      setIsMigrating(false);
    }
  };

  return (
    <div className="container-fluid py-4">
      {/* Header */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="card" style={{ backgroundColor: colors.card, border: `1px solid ${colors.cardBorder}` }}>
            <div className="card-header" style={{ backgroundColor: colors.primary, color: 'white' }}>
              <h2 className="mb-0 d-flex align-items-center">
                <FaRobot className="me-3" />
                Entwicklungsseite - Automatische Schema-Generierung
              </h2>
            </div>
            <div className="card-body">
              <p className="mb-3" style={{ color: colors.textSecondary }}>
                Diese Seite zeigt das vollautomatische Schema-Generierungssystem, das TypeScript-Interfaces analysiert
                und automatisch Datenbankschemata erstellt und migriert.
              </p>
              
              {/* Schema-Statistiken */}
              {autoGeneratedSchema && (
                <div className="row mb-3">
                  <div className="col-md-3">
                    <div className="text-center p-2" style={{ backgroundColor: colors.light, borderRadius: '8px' }}>
                      <div className="h4 mb-0" style={{ color: colors.primary }}>{Object.keys(autoGeneratedSchema).length}</div>
                      <small style={{ color: colors.textSecondary }}>Interfaces</small>
                    </div>
                  </div>
                  <div className="col-md-3">
                    <div className="text-center p-2" style={{ backgroundColor: colors.light, borderRadius: '8px' }}>
                      <div className="h4 mb-0" style={{ color: colors.success }}>
                        {Object.values(autoGeneratedSchema).reduce((sum: number, def: any) => sum + def.columns.length, 0)}
                      </div>
                      <small style={{ color: colors.textSecondary }}>Spalten</small>
                    </div>
                  </div>
                  <div className="col-md-3">
                    <div className="text-center p-2" style={{ backgroundColor: colors.light, borderRadius: '8px' }}>
                      <div className="h4 mb-0" style={{ color: colors.info }}>
                        {Object.values(autoGeneratedSchema).reduce((sum: number, def: any) => sum + def.columns.filter((col: any) => col.primary).length, 0)}
                      </div>
                      <small style={{ color: colors.textSecondary }}>Primary Keys</small>
                    </div>
                  </div>
                  <div className="col-md-3">
                    <div className="text-center p-2" style={{ backgroundColor: colors.light, borderRadius: '8px' }}>
                      <div className="h4 mb-0" style={{ color: schemaValidation?.valid ? colors.success : colors.danger }}>
                        {schemaValidation?.valid ? '‚úì' : '‚úó'}
                      </div>
                      <small style={{ color: colors.textSecondary }}>Status</small>
                    </div>
                  </div>
                </div>
              )}

              {/* Schema-Info */}
              <div className="row">
                <div className="col-md-6">
                  <h5 style={{ color: colors.text }}>Automatische Generierung</h5>
                  <ul className="list-unstyled">
                    <li><strong>Methode:</strong> TypeScript AST-Parsing</li>
                    <li><strong>Tool:</strong> ts-morph</li>
                    <li><strong>Ausgabe:</strong> PostgreSQL SQL</li>
                    <li><strong>Migration:</strong> Automatisch</li>
                  </ul>
                </div>
                <div className="col-md-6">
                  <h5 style={{ color: colors.text }}>Validierung</h5>
                  {schemaValidation && (
                    <div>
                      <div className={`badge ${schemaValidation.valid ? 'bg-success' : 'bg-danger'} mb-2`}>
                        {schemaValidation.valid ? 'G√ºltig' : 'Ung√ºltig'}
                      </div>
                      {schemaValidation.warnings.length > 0 && (
                        <ul className="list-unstyled">
                          {schemaValidation.warnings.map((warning: string, index: number) => (
                            <li key={index} className="text-warning small">‚Ä¢ {warning}</li>
                          ))}
                        </ul>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Automatische Schema-Generierung */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="card" style={{ backgroundColor: colors.card, border: `1px solid ${colors.cardBorder}` }}>
            <div 
              className="card-header d-flex justify-content-between align-items-center" 
              style={{ backgroundColor: colors.success, color: 'white', cursor: 'pointer' }}
              onClick={() => toggleSection('autoSchemaGenerator')}
            >
              <h5 className="mb-0 d-flex align-items-center">
                <FaMagic className="me-2" />
                Automatische Schema-Generierung
              </h5>
              <div className="d-flex align-items-center gap-2">
                <button 
                  className="btn btn-sm btn-outline-light"
                  onClick={(e) => {
                    e.stopPropagation();
                    generateAutoSchema();
                  }}
                  disabled={isGeneratingAutoSchema}
                >
                  {isGeneratingAutoSchema ? (
                    <>
                      <FaSync className="me-1 fa-spin" />
                      Generiert...
                    </>
                  ) : (
                    <>
                      <FaMagic className="me-1" />
                      Schema generieren
                    </>
                  )}
                </button>
                {expandedSections.autoSchemaGenerator ? <FaEyeSlash /> : <FaEye />}
              </div>
            </div>
            {expandedSections.autoSchemaGenerator && (
              <div className="card-body">
                <div className="row">
                  <div className="col-12">
                    <h6>Automatische Interface-Analyse mit ts-morph</h6>
                    <p className="text-muted small mb-3">
                      <strong>Funktionsweise:</strong><br/>
                      ‚Ä¢ Analysiert TypeScript-Interfaces zur Build-Zeit<br/>
                      ‚Ä¢ Verwendet AST-Parsing f√ºr genaue Typ-Erkennung<br/>
                      ‚Ä¢ Generiert PostgreSQL-SQL automatisch<br/>
                      ‚Ä¢ Keine manuellen Schema-Definitionen erforderlich
                    </p>
                    
                    {autoGeneratedSchema ? (
                      <div>
                        {/* Interface-√úbersicht */}
                        <h6>Generierte Interfaces</h6>
                        <div className="row">
                          {Object.entries(autoGeneratedSchema).map(([interfaceName, definition]: [string, any]) => (
                            <div key={interfaceName} className="col-md-4 mb-3">
                              <div className="card" style={{ backgroundColor: colors.light, border: `1px solid ${colors.cardBorder}` }}>
                                <div className="card-body">
                                  <h6 className="mb-2" style={{ color: colors.text }}>
                                    <FaTable className="me-2" style={{ color: colors.primary }} />
                                    {interfaceName}
                                  </h6>
                                  <p className="mb-2 small" style={{ color: colors.textSecondary }}>
                                    Tabelle: <code>{definition.tableName}</code>
                                  </p>
                                  <div className="d-flex justify-content-between align-items-center">
                                    <span className="badge bg-primary">{definition.columns.length} Spalten</span>
                                    <span className="badge bg-success">
                                      {definition.columns.filter((col: any) => col.primary).length} PK
                                    </span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                        
                        {generatedSQL && (
                          <div className="mt-3">
                            <h6>Generierte SQL-Befehle</h6>
                            <div className="bg-dark text-light p-3 rounded" style={{ maxHeight: '400px', overflowY: 'auto' }}>
                              <pre className="mb-0 small">
                                {generatedSQL}
                              </pre>
                            </div>
                            <div className="mt-2">
                              <button 
                                className="btn btn-outline-success btn-sm"
                                onClick={() => {
                                  navigator.clipboard.writeText(generatedSQL);
                                  alert('SQL-Befehle in Zwischenablage kopiert!');
                                }}
                              >
                                <FaCode className="me-1" />
                                SQL kopieren
                              </button>
                            </div>
                          </div>
                        )}
                      </div>
                    ) : (
                      <div className="alert alert-info">
                        <FaInfoCircle className="me-2" />
                        Kein automatisch generiertes Schema gefunden. Klicken Sie auf "Schema generieren" um zu beginnen.
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Schema-Migration */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="card" style={{ backgroundColor: colors.card, border: `1px solid ${colors.cardBorder}` }}>
            <div 
              className="card-header d-flex justify-content-between align-items-center" 
              style={{ backgroundColor: colors.warning, color: 'white', cursor: 'pointer' }}
              onClick={() => toggleSection('schemaMigration')}
            >
              <h5 className="mb-0 d-flex align-items-center">
                <FaSync className="me-2" />
                Automatische Schema-Migration
              </h5>
              <div className="d-flex align-items-center gap-2">
                <button 
                  className="btn btn-sm btn-outline-light"
                  onClick={(e) => {
                    e.stopPropagation();
                    executeMigration();
                  }}
                  disabled={isMigrating}
                >
                  {isMigrating ? (
                    <>
                      <FaSync className="me-1 fa-spin" />
                      Migriert...
                    </>
                  ) : (
                    <>
                      <FaSync className="me-1" />
                      Migration starten
                    </>
                  )}
                </button>
                {expandedSections.schemaMigration ? <FaEyeSlash /> : <FaEye />}
              </div>
            </div>
            {expandedSections.schemaMigration && (
              <div className="card-body">
                <div className="row">
                  <div className="col-12">
                    <h6>Automatische Schema-Migration zur Laufzeit</h6>
                    <p className="text-muted small mb-3">
                      <strong>Funktionsweise:</strong><br/>
                      ‚Ä¢ Vergleicht aktuelles DB-Schema mit TypeScript-Interfaces<br/>
                      ‚Ä¢ Generiert Migrations-Skripte automatisch<br/>
                      ‚Ä¢ F√ºhrt Migrationen sicher aus<br/>
                      ‚Ä¢ Validiert Schema nach Migration
                    </p>
                    
                    {migrationResult && (
                      <div className="alert alert-info">
                        <h6>Migration Ergebnis</h6>
                        <div className={`badge ${migrationResult.success ? 'bg-success' : 'bg-danger'} mb-2`}>
                          {migrationResult.success ? 'Erfolgreich' : 'Fehlgeschlagen'}
                        </div>
                        <p className="mb-2">{migrationResult.message}</p>
                        <div className="row">
                          <div className="col-md-6">
                            <small>Ausgef√ºhrt: {migrationResult.migrationsExecuted}</small>
                          </div>
                          <div className="col-md-6">
                            <small>Fehlgeschlagen: {migrationResult.migrationsFailed}</small>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    <div className="alert alert-warning">
                      <FaExclamationTriangle className="me-2" />
                      <strong>Hinweis:</strong> Die Migration ist derzeit simuliert. In der Produktionsumgebung 
                      w√ºrde eine echte Datenbankverbindung verwendet werden.
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Debug Storage-Schema */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="card" style={{ backgroundColor: colors.card, border: `1px solid ${colors.cardBorder}` }}>
            <div 
              className="card-header d-flex justify-content-between align-items-center" 
              style={{ backgroundColor: colors.secondary, color: 'white', cursor: 'pointer' }}
              onClick={() => toggleSection('debugAppStart')}
            >
              <h5 className="mb-0 d-flex align-items-center">
                <FaPlay className="me-2" />
                Debug Storage-Schema
              </h5>
              <div className="d-flex align-items-center gap-2">
                <button 
                  className="btn btn-sm btn-outline-light"
                  onClick={(e) => {
                    e.stopPropagation();
                    debugStorageSchema();
                  }}
                  disabled={isDebugRunning}
                >
                  {isDebugRunning ? (
                    <>
                      <FaSync className="me-1 fa-spin" />
                      L√§uft...
                    </>
                  ) : (
                    <>
                      <FaPlay className="me-1" />
                      Storage-Schema anzeigen
                    </>
                  )}
                </button>
                {expandedSections.debugAppStart ? <FaEyeSlash /> : <FaEye />}
              </div>
            </div>
            {expandedSections.debugAppStart && (
              <div className="card-body">
                <div className="row">
                  <div className="col-12">
                    <h6>Storage-Schema Debug-Logs</h6>
                    <p className="text-muted small mb-3">
                      <strong>Erweitertes Debugging mit StorageLayer-Update:</strong><br/>
                      ‚Ä¢ <strong>Schritt 1:</strong> Aktuelle Storage-Konfiguration auslesen (neues Schema)<br/>
                      ‚Ä¢ <strong>Schritt 2:</strong> Verbindungsdaten aus LocalStorage laden<br/>
                      ‚Ä¢ <strong>Schritt 3:</strong> StorageLayer mit Schema und Verbindungsdaten initialisieren<br/>
                      ‚Ä¢ <strong>Schritt 4:</strong> StorageLayer-Funktionalit√§t testen (Save/Load/Delete)
                    </p>
                    
                    {debugLogs.length === 0 ? (
                      <div className="alert alert-info">
                        <FaInfoCircle className="me-2" />
                        Keine Debug-Logs vorhanden. Klicken Sie auf "Storage-Schema anzeigen" um zu beginnen.
                      </div>
                    ) : (
                      <div className="bg-dark text-light p-3 rounded" style={{ maxHeight: '400px', overflowY: 'auto' }}>
                        <pre className="mb-0 small">
                          {debugLogs.map((log, index) => (
                            <div key={index}>{log}</div>
                          ))}
                        </pre>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* LocalStorage Inspector */}
      <div className="row mt-4">
        <div className="col-12">
          <div className="card" style={{ backgroundColor: colors.card, border: `1px solid ${colors.cardBorder}` }}>
            <div 
              className="card-header d-flex justify-content-between align-items-center" 
              style={{ backgroundColor: colors.info, color: 'white', cursor: 'pointer' }}
              onClick={() => toggleSection('localStorageInspector')}
            >
              <h5 className="mb-0 d-flex align-items-center">
                <FaDatabase className="me-2" />
                LocalStorage Inspector
              </h5>
              <div className="d-flex align-items-center gap-2">
                <button 
                  className="btn btn-sm btn-outline-light"
                  onClick={(e) => {
                    e.stopPropagation();
                    loadLocalStorageData();
                  }}
                >
                  <FaSync className="me-1" />
                  Aktualisieren
                </button>
                {expandedSections.localStorageInspector ? <FaEyeSlash /> : <FaEye />}
              </div>
            </div>
            {expandedSections.localStorageInspector && (
              <div className="card-body">
                <div className="row">
                  <div className="col-12">
                    <h6>LocalStorage-Daten (chef_* Keys)</h6>
                    {Object.keys(localStorageData).length === 0 ? (
                      <div className="alert alert-info">
                        <FaInfoCircle className="me-2" />
                        Keine LocalStorage-Daten gefunden. F√ºhren Sie eine Migration durch, um Daten zu erstellen.
                      </div>
                    ) : (
                      <div className="table-responsive">
                        <table className="table table-sm">
                          <thead>
                            <tr>
                              <th>Key</th>
                              <th>Typ</th>
                              <th>Inhalt (Vorschau)</th>
                              <th>Aktionen</th>
                            </tr>
                          </thead>
                          <tbody>
                            {Object.entries(localStorageData).map(([key, value]) => (
                              <tr key={key}>
                                <td>
                                  <code>{key}</code>
                                </td>
                                <td>
                                  <span className="badge bg-secondary">
                                    {Array.isArray(value) ? 'Array' : typeof value}
                                  </span>
                                </td>
                                <td>
                                  <div style={{ maxWidth: '300px', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                                    {Array.isArray(value) ? (
                                      <span className="text-muted">
                                        {value.length} Eintr√§ge
                                        {value.length > 0 && (
                                          <div className="small">
                                            Beispiel: {JSON.stringify(value[0]).substring(0, 100)}...
                                          </div>
                                        )}
                                      </span>
                                    ) : (
                                      <code className="small">
                                        {JSON.stringify(value).substring(0, 100)}...
                                      </code>
                                    )}
                                  </div>
                                </td>
                                <td>
                                  <button 
                                    className="btn btn-sm btn-outline-primary"
                                    onClick={() => {
                                      const fullData = JSON.stringify(value, null, 2);
                                      navigator.clipboard.writeText(fullData);
                                      alert('Daten in Zwischenablage kopiert!');
                                    }}
                                  >
                                    <FaCode className="me-1" />
                                    Kopieren
                                  </button>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DevelopmentPage;