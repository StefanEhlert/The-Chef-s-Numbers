import React, { useState, useEffect } from 'react';
import { FaCog, FaCode, FaDatabase, FaSync, FaCheckCircle, FaExclamationTriangle, FaEye, FaEyeSlash } from 'react-icons/fa';

const DevelopmentPage: React.FC = () => {
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    schemaComparison: true,
    phase1: false,
    phase2: false,
    phase3: false
  });
  const [currentSchema, setCurrentSchema] = useState<any>(null);
  const [previousSchema, setPreviousSchema] = useState<any>(null);
  const [schemaChanges, setSchemaChanges] = useState<any>(null);
  const [isLoadingSchema, setIsLoadingSchema] = useState(false);

  const colors = {
    primary: '#007bff',
    secondary: '#6c757d',
    success: '#28a745',
    danger: '#dc3545',
    warning: '#ffc107',
    info: '#17a2b8',
    light: '#f8f9fa',
    dark: '#343a40',
    background: '#ffffff',
    card: '#ffffff',
    cardBorder: '#dee2e6',
    text: '#212529',
    textSecondary: '#6c757d'
  };

  // Lade Schema-Daten beim Start
  useEffect(() => {
    loadSchemas();
  }, []);

  const loadSchemas = async () => {
    setIsLoadingSchema(true);
    try {
      // Lade aktuelles Schema
      const currentSchemaModule = await import('../schemas/generated/autoGeneratedSchema');
      const currentDefs = currentSchemaModule.AUTO_GENERATED_SCHEMA_DEFINITIONS;
      setCurrentSchema(currentDefs);

      // Lade vorheriges Schema (wenn vorhanden)
      try {
        const previousDefs = await fetch('/schemas/generated/autoSchemaDefinitions.json')
          .then(res => res.json())
          .catch(() => null);
        setPreviousSchema(previousDefs);

        // Vergleiche Schemas
        if (previousDefs) {
          const changes = compareSchemas(previousDefs, currentDefs);
          setSchemaChanges(changes);
        }
      } catch (error) {
        console.log('Kein vorheriges Schema gefunden (erste Generierung)');
      }
    } catch (error) {
      console.error('Fehler beim Laden der Schemas:', error);
    } finally {
      setIsLoadingSchema(false);
    }
  };

  const compareSchemas = (previous: any, current: any) => {
    const changes: any = {
      newTables: [],
      removedTables: [],
      changedTables: [],
      totalChanges: 0
    };

    // Neue Tabellen
    changes.newTables = Object.keys(current).filter(k => !previous[k]);
    
    // Entfernte Tabellen
    changes.removedTables = Object.keys(previous).filter(k => !current[k]);

    // Geänderte Tabellen
    for (const [tableName, currentDef] of Object.entries(current) as any) {
      if (previous[tableName]) {
        const prevDef = previous[tableName];
        const tableChanges: any = {
          name: tableName,
          newColumns: [],
          removedColumns: [],
          changedColumns: []
        };

        // Neue Spalten
        const newColumns = currentDef.columns.filter(
          (col: any) => !prevDef.columns.find((c: any) => c.name === col.name)
        );
        tableChanges.newColumns = newColumns;

        // Geänderte Spalten
        const changedColumns = currentDef.columns.filter((currentCol: any) => {
          const prevCol = prevDef.columns.find((c: any) => c.name === currentCol.name);
          if (!prevCol) return false;
          return (
            prevCol.type !== currentCol.type ||
            prevCol.nullable !== currentCol.nullable ||
            prevCol.defaultValue !== currentCol.defaultValue
          );
        });
        tableChanges.changedColumns = changedColumns;

        // Entfernte Spalten
        const removedColumns = prevDef.columns.filter(
          (prevCol: any) => !currentDef.columns.find((c: any) => c.name === prevCol.name)
        );
        tableChanges.removedColumns = removedColumns;

        if (newColumns.length > 0 || changedColumns.length > 0 || removedColumns.length > 0) {
          changes.changedTables.push(tableChanges);
        }
      }
    }

    changes.totalChanges = changes.newTables.length + 
                          changes.removedTables.length + 
                          changes.changedTables.length;

    return changes;
  };

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  return (
    <div className="container-fluid py-4">
      {/* Header */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="card" style={{ backgroundColor: colors.card, border: `1px solid ${colors.cardBorder}` }}>
            <div className="card-header" style={{ backgroundColor: colors.primary, color: 'white' }}>
              <h2 className="mb-0">
                Entwicklungsseite - Schema-Migration System
              </h2>
            </div>
            <div className="card-body">
              <p className="mb-3" style={{ color: colors.textSecondary }}>
                Diese Seite dient zum Testen des neuen idempotenten Schema-Migrations-Systems.
              </p>

              {/* Hosting-Environment Test-Override */}
              <div className="alert alert-info mb-4" style={{ backgroundColor: '#17a2b820', borderColor: '#17a2b8' }}>
                <div className="d-flex align-items-center justify-content-between">
                  <div className="flex-grow-1">
                    <h6 className="mb-2 d-flex align-items-center">
                      <FaCog className="me-2" style={{ color: '#17a2b8' }} />
                      Hosting-Environment Simulator
                    </h6>
                    <p className="mb-2" style={{ fontSize: '0.9rem', color: colors.text }}>
                      Aktuell erkannt: <strong>{
                        (() => {
                          const hostname = window.location.hostname;
                          const isLocal = 
                            hostname === 'localhost' ||
                            hostname === '127.0.0.1' ||
                            hostname.startsWith('192.168.') ||
                            hostname.startsWith('10.') ||
                            /^172\.(1[6-9]|2[0-9]|3[0-1])\./.test(hostname) ||
                            hostname.endsWith('.local');
                          return isLocal ? 'Lokal gehostet' : 'Cloud gehostet';
                        })()
                      }</strong> (Hostname: {window.location.hostname})
                    </p>
                    <p className="mb-0" style={{ fontSize: '0.85rem', color: colors.textSecondary }}>
                      Simulieren Sie Cloud-Hosting, um die Selfhosting-Ansicht in der StorageManagement-Seite zu testen.
                    </p>
                  </div>
                  <div className="ms-3">
                    <div className="form-check form-switch" style={{ fontSize: '1.2rem' }}>
                      <input
                        className="form-check-input"
                        type="checkbox"
                        id="hostingOverride"
                        checked={(() => {
                          const override = localStorage.getItem('hostingEnvironmentOverride');
                          return override === 'cloud';
                        })()}
                        onChange={(e) => {
                          if (e.target.checked) {
                            localStorage.setItem('hostingEnvironmentOverride', 'cloud');
                            console.log('🔧 Hosting-Environment Override: cloud');
                          } else {
                            localStorage.removeItem('hostingEnvironmentOverride');
                            console.log('🔧 Hosting-Environment Override entfernt');
                          }
                          // Seite neu laden, damit StorageManagement die Änderung mitbekommt
                          window.location.reload();
                        }}
                        style={{ cursor: 'pointer' }}
                      />
                      <label className="form-check-label" htmlFor="hostingOverride" style={{ cursor: 'pointer', userSelect: 'none' }}>
                        <strong>Cloud-Hosting simulieren</strong>
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Schema-Vergleich */}
      {!isLoadingSchema && currentSchema && (
        <div className="row mb-4">
          <div className="col-12">
            <div className="card" style={{ backgroundColor: colors.card, border: `1px solid ${colors.cardBorder}` }}>
              <div 
                className="card-header d-flex justify-content-between align-items-center" 
                style={{ backgroundColor: colors.info, color: 'white', cursor: 'pointer' }}
                onClick={() => toggleSection('schemaComparison')}
              >
                <h5 className="mb-0 d-flex align-items-center">
                  <FaDatabase className="me-2" />
                  Schema-Vergleich & Migration Control Center
                </h5>
                <div className="d-flex align-items-center gap-2">
                  <button 
                    className="btn btn-sm btn-outline-light"
                    onClick={(e) => {
                      e.stopPropagation();
                      loadSchemas();
                    }}
                    disabled={isLoadingSchema}
                  >
                    <FaSync className="me-1" />
                    Aktualisieren
                  </button>
                  {expandedSections.schemaComparison ? <FaEyeSlash /> : <FaEye />}
                </div>
              </div>
              {expandedSections.schemaComparison && (
                <div className="card-body">
                  {/* Übersicht */}
                  <div className="row mb-3">
                    <div className="col-md-3">
                      <div className="text-center p-3" style={{ backgroundColor: colors.light, borderRadius: '8px' }}>
                        <div className="h4 mb-0" style={{ color: colors.primary }}>{Object.keys(currentSchema).length}</div>
                        <small style={{ color: colors.textSecondary }}>Aktuelle Tabellen</small>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="text-center p-3" style={{ backgroundColor: colors.light, borderRadius: '8px' }}>
                        <div className="h4 mb-0" style={{ color: colors.success }}>
                          {Object.values(currentSchema).reduce((sum: number, def: any) => sum + def.columns.length, 0)}
                        </div>
                        <small style={{ color: colors.textSecondary }}>Gesamte Spalten</small>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="text-center p-3" style={{ backgroundColor: colors.light, borderRadius: '8px' }}>
                        <div className="h4 mb-0" style={{ color: schemaChanges?.totalChanges ? colors.warning : colors.success }}>
                          {schemaChanges?.totalChanges || 0}
                        </div>
                        <small style={{ color: colors.textSecondary }}>Schema-Änderungen</small>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="text-center p-3" style={{ backgroundColor: colors.light, borderRadius: '8px' }}>
                        <div className="h4 mb-0" style={{ color: schemaChanges?.totalChanges === 0 ? colors.success : colors.warning }}>
                          {schemaChanges?.totalChanges === 0 ? <FaCheckCircle /> : <FaExclamationTriangle />}
                        </div>
                        <small style={{ color: colors.textSecondary }}>Status</small>
                      </div>
                    </div>
                  </div>

                  {/* Schema-Änderungen anzeigen */}
                  {schemaChanges && schemaChanges.totalChanges > 0 && (
                    <div className="alert alert-info mb-3">
                      <h6>🔄 Schema-Änderungen erkannt:</h6>
                      {schemaChanges.newTables.length > 0 && (
                        <div className="mb-2">
                          <strong className="text-success">📋 Neue Tabellen:</strong> {schemaChanges.newTables.join(', ')}
                        </div>
                      )}
                      {schemaChanges.removedTables.length > 0 && (
                        <div className="mb-2">
                          <strong className="text-danger">🗑️ Entfernte Tabellen:</strong> {schemaChanges.removedTables.join(', ')}
                        </div>
                      )}
                      {schemaChanges.changedTables.length > 0 && (
                        <div>
                          <strong className="text-warning">🔧 Geänderte Tabellen:</strong>
                          <ul className="mb-0 mt-2">
                            {schemaChanges.changedTables.map((table: any) => (
                              <li key={table.name}>
                                <strong>{table.name}</strong>:
                                {table.newColumns.length > 0 && (
                                  <span className="text-success ms-2">
                                    +{table.newColumns.length} neue Spalten: {table.newColumns.map((c: any) => c.name).join(', ')}
                                  </span>
                                )}
                                {table.changedColumns.length > 0 && (
                                  <span className="text-warning ms-2">
                                    {table.changedColumns.length} geänderte: {table.changedColumns.map((c: any) => c.name).join(', ')}
                                  </span>
                                )}
                                {table.removedColumns.length > 0 && (
                                  <span className="text-danger ms-2">
                                    -{table.removedColumns.length} entfernte: {table.removedColumns.map((c: any) => c.name).join(', ')}
                                  </span>
                                )}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  )}

                  {schemaChanges && schemaChanges.totalChanges === 0 && (
                    <div className="alert alert-success">
                      <FaCheckCircle className="me-2" />
                      <strong>Keine Schema-Änderungen!</strong> Das Schema ist aktuell und entspricht den TypeScript-Interfaces.
                    </div>
                  )}

                  {/* Aktuelle Tabellen-Übersicht */}
                  <div className="d-flex justify-content-between align-items-center mb-3">
                    <h6 className="mb-0">Aktuelle Tabellen:</h6>
                    <button 
                      className="btn btn-sm btn-outline-primary"
                      onClick={() => {
                        const schemaJSON = JSON.stringify(currentSchema, null, 2);
                        navigator.clipboard.writeText(schemaJSON);
                        alert('Schema-Definitionen in Zwischenablage kopiert!');
                      }}
                    >
                      <FaCode className="me-1" />
                      Schema als JSON kopieren
                    </button>
                  </div>
                  <div className="row">
                    {Object.entries(currentSchema).map(([interfaceName, definition]: [string, any]) => (
                      <div key={interfaceName} className="col-md-6 mb-3">
                        <div className="card" style={{ backgroundColor: colors.light, border: `1px solid ${colors.cardBorder}` }}>
                          <div className="card-body">
                            <h6 className="mb-2" style={{ color: colors.text }}>
                              <FaDatabase className="me-2" style={{ color: colors.primary }} />
                              {interfaceName} → {definition.tableName}
                            </h6>
                            <div className="d-flex justify-content-between align-items-center mb-2">
                              <span className="badge bg-primary">{definition.columns.length} Spalten</span>
                              <span className="badge bg-success">
                                {definition.columns.filter((col: any) => col.primary).length} PK
                              </span>
                            </div>
                            
                            {/* Detaillierte Spaltenliste */}
                            <div className="table-responsive" style={{ maxHeight: '300px', overflowY: 'auto' }}>
                              <table className="table table-sm table-striped table-bordered mb-0">
                                <thead className="table-primary">
                                  <tr>
                                    <th style={{ fontSize: '0.75rem', color: 'white' }}>Spalte</th>
                                    <th style={{ fontSize: '0.75rem', color: 'white' }}>Typ</th>
                                    <th style={{ fontSize: '0.75rem', color: 'white' }}>Nullable</th>
                                    <th style={{ fontSize: '0.75rem', color: 'white' }}>PK</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {definition.columns.map((col: any, idx: number) => (
                                    <tr key={idx}>
                                      <td style={{ fontSize: '0.75rem' }}>
                                        <code>{col.name}</code>
                                      </td>
                                      <td style={{ fontSize: '0.75rem' }}>
                                        <span className="badge bg-info" style={{ fontSize: '0.65rem' }}>{col.type}</span>
                                      </td>
                                      <td style={{ fontSize: '0.75rem' }}>
                                        {col.nullable ? (
                                          <span className="badge bg-secondary" style={{ fontSize: '0.65rem' }}>NULL</span>
                                        ) : (
                                          <span className="badge bg-danger" style={{ fontSize: '0.65rem' }}>NOT NULL</span>
                                        )}
                                      </td>
                                      <td style={{ fontSize: '0.75rem' }}>
                                        {col.primary ? (
                                          <span className="badge bg-success" style={{ fontSize: '0.65rem' }}>PK</span>
                                        ) : (
                                          <span>-</span>
                                        )}
                                      </td>
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DevelopmentPage;
