# ============================================
# GitHub Action: Docker Image automatisch bauen
# Wird ausgefÃ¼hrt bei jedem Push auf main
# ============================================

name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'src/**'
      - 'public/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - '.dockerignore'
      - 'nginx.conf'
      - 'tailwind.config.js'
      - 'postcss.config.js'
  workflow_dispatch:  # ErmÃ¶glicht manuellen Start

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: stefanehlert/the-chef-s-numbers

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Code auschecken
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Docker Buildx einrichten (fÃ¼r Multi-Platform Builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Bei GitHub Container Registry anmelden
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Docker Metadata extrahieren (Tags, Labels)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=semver,pattern={{version}}

      # 5. Docker Image bauen und pushen
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # 6. Image Details ausgeben
      - name: Image Details
        run: |
          echo "âœ… Docker Image erfolgreich gebaut und gepusht!"
          echo "ðŸ“¦ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "ðŸ”— Pull: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

