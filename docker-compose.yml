version: '3.8'

# Umgebungsvariablen für die Datenbankauswahl
# Setzen Sie DB_TYPE auf "postgres" oder "mariadb"
# Setzen Sie ENABLE_MINIO auf "true" oder "false"

services:
  # PostgreSQL Service (aktiviert wenn DB_TYPE=postgres)
  postgres:
    image: postgres:15-alpine
    container_name: chef_numbers_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chef_numbers}
      POSTGRES_USER: ${POSTGRES_USER:-chef}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - chef_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chef} -d ${POSTGRES_DB:-chef_numbers}"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.project=chef-numbers"
      - "com.docker.compose.service=postgres"
    profiles:
      - postgres

  # MariaDB Service (aktiviert wenn DB_TYPE=mariadb)
  mariadb:
    image: mariadb:10.11
    container_name: chef_numbers_mariadb
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-chef_numbers}
      MYSQL_USER: ${MYSQL_USER:-chef}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - chef_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER:-chef}", "-p${MYSQL_PASSWORD:-password}"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.project=chef-numbers"
      - "com.docker.compose.service=mariadb"
    profiles:
      - mariadb

  # MinIO Service für Bildverwaltung
  minio:
    image: minio/minio:latest
    container_name: chef_numbers_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-chef_access_key}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-chef_secret_key}
      MINIO_CONSOLE_ADDRESS: ":9001"
      MINIO_SERVER_URL: ${MINIO_SERVER_URL:-http://localhost:9000}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
      - ./minio/config:/root/.minio
    command: server /data --console-address ":9001"
    networks:
      - chef_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.project=chef-numbers"
      - "com.docker.compose.service=minio"
    profiles:
      - minio

  # PostgREST Service für direkten PostgreSQL-Zugriff
  postgrest:
    image: postgrest/postgrest:v11.2.0
    container_name: chef_numbers_postgrest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER:-chef}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-chef_numbers}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_SERVER_HOST: "0.0.0.0"
      PGRST_SERVER_PORT: 3000
      PGRST_CORS_ALLOWED_ORIGINS: "*"
      PGRST_CORS_ALLOWED_METHODS: "GET, POST, PUT, PATCH, DELETE, OPTIONS"
      PGRST_CORS_ALLOWED_HEADERS: "Content-Type, Authorization, Accept, Origin, X-Requested-With"
      PGRST_CORS_EXPOSED_HEADERS: "Content-Range, Content-Location"
      PGRST_CORS_MAX_AGE: "3600"
    ports:
      - "${POSTGREST_PORT:-5433}:3000"
    networks:
      - chef_network
    depends_on:
      postgres:
        condition: service_healthy
        profile: postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/rpc/api_check_schema_status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.docker.compose.project=chef-numbers"
      - "com.docker.compose.service=postgrest"
    profiles:
      - postgres

  # Backend Service
  backend:
    build: ./backend
    container_name: chef_numbers_backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-3000}
      DB_TYPE: ${DB_TYPE:-postgres}
      # PostgreSQL Variablen
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-chef_numbers}
      POSTGRES_USER: ${POSTGRES_USER:-chef}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      # MariaDB Variablen
      MYSQL_HOST: ${MYSQL_HOST:-mariadb}
      MYSQL_PORT: ${MYSQL_PORT:-3306}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-chef_numbers}
      MYSQL_USER: ${MYSQL_USER:-chef}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
      # MinIO Variablen
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio}
      MINIO_PORT: ${MINIO_PORT:-9000}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-chef_access_key}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-chef_secret_key}
      MINIO_BUCKET: ${MINIO_BUCKET:-chef-images}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - chef_network
    depends_on:
      postgres:
        condition: service_healthy
        profile: postgres
      mariadb:
        condition: service_healthy
        profile: mariadb
      minio:
        condition: service_healthy
        profile: minio
    labels:
      - "com.docker.compose.project=chef-numbers"
      - "com.docker.compose.service=backend"

networks:
  chef_network:
    driver: bridge
    labels:
      - "com.docker.compose.project=chef-numbers"

volumes:
  postgres_data:
    driver: local
    labels:
      - "com.docker.compose.project=chef-numbers"
  mariadb_data:
    driver: local
    labels:
      - "com.docker.compose.project=chef-numbers"
  minio_data:
    driver: local
    labels:
      - "com.docker.compose.project=chef-numbers"
