version: '3.8'

services:
  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: chef-numbers-minio
    restart: unless-stopped
    ports:
      - "{{CONFIG:minio.port}}:9000"
      - "{{CONFIG:minio.consolePort}}:9001"
    environment:
      MINIO_ROOT_USER: {{CONFIG:minio.accessKey}}
      MINIO_ROOT_PASSWORD: {{CONFIG:minio.secretKey}}
      # MinIO Parity-Konfiguration für Single-Disk-Setup
      MINIO_STORAGE_CLASS_STANDARD: "EC:0"  # 0 Paritätsblöcke für Single-Disk
      MINIO_STORAGE_CLASS_RRS: "EC:0"       # 0 Paritätsblöcke für Single-Disk
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - chef-numbers-network

  # MinIO Bucket Initialization
  minio-init:
    image: minio/mc:latest
    container_name: chef-numbers-minio-init
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: {{CONFIG:minio.accessKey}}
      MINIO_ROOT_PASSWORD: {{CONFIG:minio.secretKey}}
    entrypoint: >
      /bin/sh -c "
      echo '🪣 Warte auf MinIO-Server...';
      sleep 10;
      echo '🔧 Konfiguriere MinIO-Client...';
      mc alias set minio http://minio:9000 {{CONFIG:minio.accessKey}} {{CONFIG:minio.secretKey}};
      echo '📦 Erstelle Bucket: {{CONFIG:minio.bucket}}';
      mc mb minio/{{CONFIG:minio.bucket}} --ignore-existing;
      echo '✅ Bucket erfolgreich erstellt!';
      mc ls minio/;
      echo '🎉 MinIO-Initialisierung abgeschlossen!';
      echo '🗑️ Container wird automatisch entfernt...';
      "
    networks:
      - chef-numbers-network
    restart: "no"

volumes:
  minio_data:
    driver: local

networks:
  chef-numbers-network:
    driver: bridge
    name: chef-numbers-network
