version: '3.8'

services:
  # MariaDB Database
  mariadb:
    image: mariadb:10.11
    container_name: chef-numbers-mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: {{CONFIG:mariadb.password}}
      MYSQL_DATABASE: {{CONFIG:mariadb.database}}
      MYSQL_USER: {{CONFIG:mariadb.username}}
      MYSQL_PASSWORD: {{CONFIG:mariadb.password}}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "{{CONFIG:mariadb.port}}:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
    command: |
      sh -c "
        # Starte MariaDB im Hintergrund
        docker-entrypoint.sh mysqld &
        MYSQL_PID=\$!
        
        # Warte bis MariaDB bereit ist
        until mysqladmin ping -h localhost -u root -p{{CONFIG:mariadb.password}} --silent; do
          echo 'Warte auf MariaDB...'
          sleep 2
        done
        
        # Lade Init-Script von der App herunter (curl ist bereits installiert)
        echo 'Lade Init-Script von der App...'
        curl -o /docker-entrypoint-initdb.d/init-chef-numbers-mariadb.sql {{FUNCTION:getFrontendUrl}}/init-scripts/init-chef-numbers-mariadb.sql
        
        # Führe Init-Script aus
        echo 'Führe Init-Script aus...'
        mysql -u root -p{{CONFIG:mariadb.password}} {{CONFIG:mariadb.database}} < /docker-entrypoint-initdb.d/init-chef-numbers-mariadb.sql
        
        # Warte auf MariaDB-Prozess
        wait \$MYSQL_PID
      "
    networks:
      - chef-numbers-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u {{CONFIG:mariadb.username}} -p{{CONFIG:mariadb.password}} --silent || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Prisma REST API Server
  prisma-api:
    image: node:18-alpine
    container_name: chef-numbers-prisma-api
    restart: unless-stopped
    working_dir: /app
    environment:
      DATABASE_URL: mysql://{{CONFIG:mariadb.username}}:{{CONFIG:mariadb.password}}@mariadb:3306/{{CONFIG:mariadb.database}}
      JWT_SECRET: {{FUNCTION:generateJWTSecret}}
      PORT: 3001
      NODE_ENV: production
    ports:
      - "{{CONFIG:prisma.port}}:3001"
    command: |
      sh -c "
        echo '📦 Installiere curl und OpenSSL für Alpine...'
        apk add --no-cache curl openssl
        
        echo '📥 Lade Prisma API Dateien herunter...'
        curl -o /app/package.json {{FUNCTION:getFrontendUrl}}/prisma-api/package.json
        curl -o /app/schema.prisma {{FUNCTION:getFrontendUrl}}/prisma-api/schema.prisma
        curl -o /app/server.js {{FUNCTION:getFrontendUrl}}/prisma-api/server.js
        
        echo '📦 Installiere Prisma API Dependencies...'
        npm install
        
        echo '🔄 Generiere Prisma Client...'
        npx prisma generate
        
        echo '🗄️ Führe Datenbank-Migrationen aus...'
        npx prisma db push
        
        echo '🚀 Starte Prisma API Server...'
        npm start
      "
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - chef-numbers-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s

volumes:
  mariadb_data:
    driver: local

networks:
  chef-numbers-network:
    driver: bridge
    name: chef-numbers-network
